// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  username String?
  email    String? @unique
  phone    String
  password String
  role RoleEnum @default(SELLER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile?

  @@map("user")
}

enum RoleEnum {
  ADMIN
  SELLER

  @@map("role_enum")
}

model Profile {
  id Int @id @default(autoincrement())
  fullname String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int   @unique
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  Toko   Toko?

  @@map("profile")
}

model Toko {
  id          Int    @id @default(autoincrement())
  nama_toko   String
  slogan_toko String
  description String
  img         String

  userId  Int     @unique
  profile Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  location Location[]

  @@map("toko")
}

model Location {
  id               Int    @id @default(autoincrement())
  name             String
  address          String
  postal_code      String
  city_district    String
  lat              Float
  lng              Float
  is_main_location String

  tokoId Int  
  toko   Toko @relation(fields: [tokoId], references: [id], onDelete: Cascade)
}

model Product {
  id            Int     @id @default(autoincrement())
  nama_product  String
  description   String
  is_active     Boolean @default(false)
  minumum_order String
  size          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variant variant[]

  @@map("product")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  child    Category? @relation("parentCategory")
  parentId Int       @unique
  parent   Category? @relation("parentCategory", fields: [parentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("category")
}

model variant {
  id        Int     @id @default(autoincrement())
  name      String
  is_active Boolean

  product_id Int
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  variant_options variant_options[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("variant")
}

model variant_options {
  id   Int    @id @default(autoincrement())
  name String

  variant_id Int
  variant    variant @relation(fields: [variant_id], references: [id], onDelete: Cascade)

  variant_options_values variant_options_values[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model variant_options_values {
  id        Int     @id @default(autoincrement())
  sku       String
  weight    String
  stock     String
  price     String
  is_active Boolean

  variant_options_id Int
  variant_options    variant_options @relation(fields: [variant_options_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
